/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define SYMBOLS 1
#define NUMBERS 2
#define NAVI    3
#define NUMPAD  4
#define MEDIA   5
#define GAMING  6

#define BT0     BT_SEL 0
#define BT1     BT_SEL 1
#define BT2     BT_SEL 2
#define BT3     BT_SEL 3
#define BT4     BT_SEL 4

#define JUMP    LC(LG(LALT))    // used in auto hotkey to lauch apps and a few other utilities
#define AUDOUT  LG(LA(LC(F11))) // used to swap audio output using SoundSwitch on Windows

/ {
        behaviors {
                th: tap_hold {
                        compatible = "zmk,behavior-hold-tap";
                        label ="TAP_HOLD";
                        #binding-cells = <2>;
                        tapping-term-ms = <321>;
                        quick-tap-ms = <0>;
                        flavor = "tap-preferred";
                        bindings = <&kp>, <&kp>;
                };
                tlhk: tap_layer_hold_key {
                        compatible = "zmk,behavior-hold-tap";
                        label ="TAP_LAYER_HOLD_KEY";
                        #binding-cells = <2>;
                        tapping-term-ms = <321>;
                        quick-tap-ms = <0>;
                        flavor = "tap-preferred";
                        bindings = <&kp>, <&to>;
                };      
                smart_caps: smart_caps_word {
                        compatible = "zmk,behavior-caps-word";
                        label = "SMART_CAPS";
                        #binding-cells = <0>;
                        continue-list = <UNDERSCORE MINUS PLUS STAR LPAR RPAR SPACE TAB RET>;
                };
                sftcps: shift_caps_word {
                        compatible = "zmk,behavior-tap-dance";
                        label = "SHIFT_CAPS_WORD";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp LSHIFT>, <&smart_caps>;
                };
                tdm: tap_dance_media {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_MEDIA";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&lt MEDIA C_PLAY_PAUSE>, <&th C_MUTE C_NEXT>;
                };
                tdsdcq: tap_dance_sdcq {
                        // Tap Dance Space Dot Comma Question
                        // useful when using a mouse in your right hand while coding
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_SDCQ";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&th DOT SPACE>, <&th QMARK COMMA>;
                };
                dtac: double_tap_alt_ctl {
                        compatible = "zmk,behavior-tap-dance";
                        label ="DOUBLE_TAP_ALT_CTL";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp LALT>, <&kp LCTRL>;
                };
                dtgh: double_tap_jump_gui {
                        compatible = "zmk,behavior-tap-dance";
                        label ="DOUBLE_TAP_GUI_JUMP";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp LGUI>, <&kp JUMP>;
                };
                tdlyr: tap_dance_layers {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_LAYERS";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&mo SYMBOLS>, <&to NUMPAD>, <&to GAMING>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  F  |  P  |  B  |\__/|  J  |  L  |  U  |  Y  | ; : | Media |
// | BSPC |  A  |  R  |  S  |  T  |  G  |\__/|  M  |  N  |  E  |  I  |  O  | '  "  |
// | SHFT |  Z  |  X  |  C  |  D  |  V  |\__/|  K  |  H  |  ,  |  .  | / ? | Nums  |  
//                    | JUMP| CTL | ENT |\__/| SPC | ALT | RSE |
                        bindings = <
   &th ESC TAB &kp Q &kp W &kp F &kp P &kp B  /**/ &kp J &kp L &kp U     &kp Y   &th COLON SEMI  &tdm
   &kp BSPC    &kp A &kp R &kp S &kp T &kp G  /**/ &kp M &kp N &kp E     &kp I   &kp O           &th DQT SQT
   &sftcps     &kp Z &kp X &kp C &kp D &kp V  /**/ &kp K &kp H &kp COMMA &kp DOT &th QMARK FSLH  &lt NUMBERS DEL
               &dtgh &kp LCTL &lt SYMBOLS RET /**/ &lt NAVI SPACE   &dtac     &tdlyr 
                        >;
                };

                symbols_layer {
// -----------------------------------------------------------------------------------------
// |     |  !  |  @  |  #  |  $  |  %  |\__/|  ^  |  &  |  *  |  (  |  )  |   |
// | DEL |  [  |  ]  |  (  |  )  |  `  |\__/| "|" |  {  |  }  |  -  |  =  | ` |
// |     |  <  |  >  |  {  |  }  |  .  |\__/|  _  |  ~  |  +  |  _  |  \  |   |
//                   | JUMP|     | ENT |\__/| SPC | ALT |     |
                        bindings = <
   &trans  &kp EXCL      &kp AT           &kp HASH &kp DLLR &kp PRCNT /**/ &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR  &kp RPAR  &trans
   &kp DEL &kp LBKT      &kp RBKT         &kp LPAR &kp RPAR &kp GRAVE /**/ &kp PIPE  &kp LBRC  &kp RBRC        &kp MINUS &kp EQUAL &kp GRAVE
   &trans  &kp LESS_THAN &kp GREATER_THAN &kp LBRC &kp RBRC &tdsdcq   /**/ &kp UNDER &kp TILDE &kp PLUS        &kp UNDER &kp BSLH  &trans
                    	                  &trans   &trans   &trans    /**/ &trans    &tlhk LALT DEFAULT            &trans
                        >;
                };

                numbers_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  F1 |  F2 |  F3 |  F4 |  F5 |\__/|  F6 |  F7 |  F8 |  F9 | F10 |    |
// | BSPC |  1  |  2  |  3  |  4  |  5  |\__/|  6  |  7  |  8  |  9  |  0  |    |
// | SHFT | F11 | F12 |     |     |     |\__/|     |     |     |     |     |    |
//                    | JUMP|     | ENT |\__/| SPC | ALT |     |
                        bindings = <
   &trans &kp F1  &kp F2  &kp F3 &kp F4 &kp F5 /**/ &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &trans
   &trans &kp N1  &kp N2  &kp N3 &kp N4 &kp N5 /**/ &kp N6 &kp N7 &kp N8 &kp N9 &kp N0  &trans
   &trans &kp F11 &kp F12 &trans &trans &trans /**/ &trans &trans &trans &trans &trans  &trans
                          &trans &trans &trans /**/ &trans &tlhk LALT DEFAULT   &trans
                        >;
                };

                navigation_layer {
// -----------------------------------------------------------------------------------------
// |     | back | fwrd |     |     |     |\__/|      | c(LFT) | UP   | c(RGT) |     |    |
// | DEL |  CTL | GUI  | ALT | SFT |     |\__/| HOME | LFT    | DWN  | RGT    | END |    |
// |     |      |      |     |     |     |\__/|      | PG_UP  | PG_DN|        |     |    |
//                     |     |     |     |\__/|      |        |      |
                        bindings = <
   &trans  &kp LC(Q)  &kp LC(W) &kp LC(F)  &kp LC(P) &trans    /**/ &trans    &kp LC(LEFT) &kp UP    &kp LC(RIGHT) &trans  &trans
   &kp DEL &kp LCTL   &kp LGUI  &kp LALT   &kp LSFT  &kp LC(L) /**/ &kp HOME  &kp LEFT     &kp DOWN  &kp RIGHT     &kp END &kp RET
   &trans  &kp LC(Z)  &kp LC(X) &kp LC(C)  &kp LC(D) &kp LC(V) /**/ &kp LC(K) &kp PG_UP    &kp PG_DN &none         &none   &trans
                                &trans     &trans    &trans    /**/ &trans    &tlhk LALT DEFAULT &trans
                        >;
                };

                numpad_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  F1 |  F2 |  F3 |  F4 |  F5 |\__/| CALC |  7  |  8  |  9  |  .  |      |
// | BSPC |  1  |  2  |  3  |  4  |  5  |\__/|  /   |  4  |  5  |  6  |  -  | TAB  |
// | SHFT | F11 | F12 |     |     |     |\__/|  *   |  1  |  2  |  3  |  +  | BSPC |
//                    | JUMP|     | ENT |\__/| SPC  | LWR |  0  |
                        bindings = <
   &trans &trans &trans &trans &trans &trans /**/ &kp SLASH &kp N7  &kp N8  &kp N9  &kp MINUS &trans
   &trans &trans &trans &trans &trans &trans /**/ &kp STAR  &kp N4  &kp N5  &kp N6  &kp PLUS  &kp TAB
   &trans &trans &trans &trans &trans &trans /**/ &kp ENTER &kp N1  &kp N2  &kp N3  &kp DOT   &kp BSPC
                        &trans &trans &trans /**/ &trans    &tlhk LALT DEFAULT      &kp N0
                        >;
                };

                media_layer {
// -----------------------------------------------------------------------------------------
// | SLEEP |     |     |     |     |     |\__/|     |     |      |      | MUTE |        |
// | BTCLR | BT1 | BT2 | BT3 | BT4 | BT5 |\__/| LFT | DWN |  UP  | RGT  |      | VOL_UP |
// |       |     |     |     |     |     |\__/|     |     | PREV | NEXT |      | VOL_DN |
//                     |     |     |     |\__/|     |     |      |
                        bindings = <
   &kp C_SLEEP_MODE &trans  &trans  &trans  &trans  &trans  /**/ &trans   &trans   &trans     &trans     &kp C_MUTE &trans
   &bt BT_CLR       &bt BT0 &bt BT1 &bt BT2 &bt BT3 &bt BT4 /**/ &kp LEFT &kp DOWN &kp UP     &kp RIGHT  &kp AUDOUT &kp C_VOL_UP
   &trans           &trans  &trans  &trans  &trans  &trans  /**/ &trans   &trans   &kp C_PREV &kp C_NEXT &trans     &kp C_VOL_DN
                                    &trans  &trans  &trans  /**/ &trans   &trans   &trans
                        >;
                };

                gaming_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  F  |  P  |  B  |\__/|  J  |  L   |  U  |  Y  |  ;  | Media  |
// | BSPC |  A  |  R  |  S  |  T  |  G  |\__/|  M  |  N   |  E  |  I  |  O  | VOL_UP |
// | SHFT |  Z  |  X  |  C  |  D  |  V  |\__/|  K  |  H   |  ,  |  .  |  /  | VOL_DN |  
//                    | JUMP| LWR | ENT |\__/| SPC | LWR  | ALT |
                        bindings = <
   &th ESC TAB &kp Q &kp W &kp F &kp P &kp B /**/ &kp J &kp L &kp U     &kp Y      &kp SEMI &tdm
   &kp BSPC    &kp A &kp R &kp S &kp T &kp G /**/ &kp M &kp N &kp E     &kp I      &kp O    &kp C_VOL_UP
   &kp LSHFT   &kp Z &kp X &kp C &kp D &kp V /**/ &kp K &kp H &kp COMMA &kp DOT    &kp FSLH &kp C_VOL_DN
   &lt SYMBOLS RET   &kp LCTL    &kp SPACE   /**/ &lt NAVI SPACE        &tlhk LALT DEFAULT  &kp RALT
                        >;
                };
        };
};